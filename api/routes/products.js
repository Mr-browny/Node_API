const express = require('express');
const router = express.Router();
const mongoose = require('mongoose')
const multer = require('multer')
const checkAuth = require('../auth/check-auth')
require('dotenv').config() 

const storage = multer.diskStorage({
    // Adjusting how files get stored
    destination: (req, file, cb) => {
        cb(null, './uploads/') /* The destination of the file */
    },
    filename: (req, file, cb) => {
        /* Had to add .replace(/:/g, '-'), after the .toIsoSting(), because
        windows os does not understand the ':' generated by that date format */
        cb(null, new Date().toISOString().replace(/:/g, '-')+ " " + file.originalname) /* Renameing the file */
    }
})

const fileFilter = (req, file, cb) => {
    const acceptedTypes = ["image/jpeg", "image/jpg", "image/png", "image/gif"];
    if (acceptedTypes.includes(file.mimetype)) {
        cb(null, true) /* This prompts to save the file */
    }else{
        cb(new Error("Oops!!! FileType not supported."), false) 
        /* This will throw an error, and it'd just force the database not to save the file   */
    }
}

const upload = multer({
    storage: storage, 
    limits: {
        fileSize: 1024 * 1024 * 5
    },
    fileFilter: fileFilter
}) /* passing the above storage settings, makes it easier to declare where and how the file gets saved*/
// const upload = multer({dest: 'uploads/'}) /* Init and configuring multer with upload destination */

const ProductController = require('../controllers/products');

router.get('/', ProductController.Get_All_products );

// By adding checkAuth middleware, express picks it up like that and runs the command 
router.post('/', checkAuth, upload.single('productImage'), ProductController.Post_product );


router.get('/:id', ProductController.Get_Single_product);

router.patch('/:id', checkAuth, ProductController.Delete_Single_product)


router.delete('/:id', checkAuth, ProductController.Delete_Single_product );



module.exports = router 